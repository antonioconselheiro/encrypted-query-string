{
  "version": 3,
  "sources": ["../../../../../node_modules/@encrypted-uri/core/index.js"],
  "sourcesContent": ["export class IterableString {\n    constructor(str) {\n        this.str = str;\n        this.cursor = 0;\n        this.DEBUG_CHARS_PREVIEW = 100;\n    }\n    get debugInfo() {\n        return String(this).substring(0, this.DEBUG_CHARS_PREVIEW);\n    }\n    get currenPosition() {\n        return this.cursor;\n    }\n    /**\n     * Return the string in it current cursor position\n     */\n    toString() {\n        return this.str.substring(this.cursor);\n    }\n    valueOf() {\n        return this.str.substring(this.cursor);\n    }\n    /**\n     * Return the original string\n     */\n    getOriginalString() {\n        return this.str;\n    }\n    /**\n     * Move the cursor and return the result\n     */\n    addCursor(param, autoTrimResult = true) {\n        let result = '';\n        if (typeof param === 'number') {\n            result = this.addCursorNumeric(param);\n        }\n        else if (typeof param === 'string') {\n            result = this.addCursorRegExp(new RegExp(param));\n        }\n        else if (param instanceof RegExp) {\n            result = this.addCursorRegExp(param);\n        }\n        else {\n            result = this.addCursorNumeric();\n        }\n        if (autoTrimResult) {\n            return result.trim();\n        }\n        else {\n            return result;\n        }\n    }\n    /**\n     * Return result without move cursor\n     */\n    spy(param, autoTrimResult = true) {\n        let result = '';\n        if (typeof param === 'number') {\n            result = this.spyNumeric(param);\n        }\n        else if (typeof param === 'string') {\n            result = this.spyRegExp(new RegExp(param));\n        }\n        else if (param instanceof RegExp) {\n            result = this.spyRegExp(param);\n        }\n        else {\n            result = this.spyNumeric();\n        }\n        if (autoTrimResult) {\n            return result.trim();\n        }\n        else {\n            return result;\n        }\n    }\n    spyNumeric(howMuchMore = 1) {\n        return this.str.substring(this.cursor, this.cursor + howMuchMore);\n    }\n    spyRegExp(pattern) {\n        const matches = String(this).match(pattern);\n        return matches && matches.length && matches[0] || '';\n    }\n    /**\n     * Move the cursor that's iterating the string\n     */\n    addCursorRegExp(pattern) {\n        if (!String(pattern).match(/^\\/\\^/)) {\n            throw new Error(`all regexp used to move the cursor in the iterable string must start with ^. Entry regex: \"${String(pattern)}\"`);\n        }\n        const match = this.spyRegExp(pattern);\n        return this.addCursorNumeric(match.length || 0);\n    }\n    /**\n     * If find an match with the regexp argument, it return the match and move the cursor\n     */\n    addCursorNumeric(howMuchMore = 1) {\n        const piece = this.spyNumeric(howMuchMore);\n        this.cursor += howMuchMore;\n        return piece;\n    }\n    toTheEnd() {\n        const content = this.str.substring(this.cursor);\n        this.cursor += content.length;\n        return content;\n    }\n    endContent() {\n        return this.end() || !!this.spy(/^\\s*$/, false);\n    }\n    end() {\n        return this.str.length <= this.cursor;\n    }\n}\nclass URIEncryptedSyntaxMatcher {\n    match(uri) {\n        return /^encrypted:/.test(uri);\n    }\n}\nclass URIEncryptedDecoder {\n    constructor() {\n        this.ENCRYPTED_URI_MATCHER = /^encrypted:/;\n        this.QUERY_STRING_MATCHER = /^\\?[^;]*;/;\n    }\n    decode(content) {\n        const resultset = { cypher: '' };\n        const iterable = new IterableString(content);\n        this.checkURI(iterable);\n        this.identifyAlgorithm(iterable, resultset);\n        this.readQueryString(iterable, resultset);\n        resultset.cypher = iterable.toTheEnd().replace(/^;/, '');\n        return resultset;\n    }\n    checkURI(iterable) {\n        const is = iterable.addCursor(this.ENCRYPTED_URI_MATCHER);\n        if (!is) {\n            throw new Error('not an encrypted uri');\n        }\n    }\n    identifyAlgorithm(iterable, resultset) {\n        const algorithmMatcher = /^[^?;]*/;\n        const algorithmValue = iterable.addCursor(algorithmMatcher);\n        if (algorithmValue) {\n            resultset.algorithm = algorithmValue;\n        }\n    }\n    readQueryString(iterable, resultset) {\n        const parametersMatcher = /^\\?([^=]+=[^=]+)(&([^=]+=[^=]+))*[;]$/;\n        const queryString = iterable.addCursor(this.QUERY_STRING_MATCHER);\n        const cleanQueryString = queryString.replace(/^\\?|;$/g, '');\n        resultset.queryString = cleanQueryString;\n        if (parametersMatcher.test(queryString)) {\n            const decodedQueryParams = new URL(`encrypted://_?${cleanQueryString}`);\n            const paramsList = Array\n                .from(decodedQueryParams.searchParams.entries())\n                .map(([key, value]) => ({ [key]: decodeURI(String(value)) }));\n            if (paramsList.length) {\n                resultset.params = paramsList.reduce((result, object) => {\n                    Object.keys(object).forEach(key => result[key] = object[key]);\n                    return result;\n                });\n            }\n        }\n    }\n}\nclass URIEncryptedEncoder {\n    encode(content) {\n        const algorithm = this.encodeAlgorithm(content);\n        const parameters = this.encodeParameters(content);\n        if (parameters) {\n            return `encrypted:${algorithm}?${parameters};${content.cypher}`;\n        }\n        else {\n            return `encrypted:${algorithm};${content.cypher}`;\n        }\n    }\n    encodeParameters(content) {\n        const params = {};\n        const contentParams = content.params || {};\n        const paramsKeys = Object.keys(contentParams);\n        if (paramsKeys.length) {\n            paramsKeys.forEach(key => params[key] = contentParams[key]);\n        }\n        else {\n            return content.queryString || '';\n        }\n        const serializer = new URLSearchParams();\n        paramsKeys.forEach(key => serializer.append(key, params[key]));\n        return serializer.toString();\n    }\n    encodeAlgorithm(content) {\n        return content.algorithm || '';\n    }\n}\nexport class URIEncryptedParser {\n    static matcher(uri) {\n        return new URIEncryptedSyntaxMatcher().match(uri);\n    }\n    constructor(content) {\n        if (typeof content === 'string') {\n            const decoder = new URIEncryptedDecoder();\n            this.decoded = decoder.decode(this.encoded = content);\n            this.encoded = content;\n        }\n        else {\n            const encoder = new URIEncryptedEncoder();\n            this.decoded = content;\n            this.encoded = encoder.encode(content);\n        }\n    }\n}\nexport class EncryptedURIEncrypter {\n    constructor(params) {\n        this.params = params;\n    }\n}\nexport class EncryptedURIDecrypter {\n    constructor(decoded) {\n        this.decoded = decoded;\n    }\n}\nexport class EncryptedURI {\n    static matcher(uri) {\n        return new URIEncryptedSyntaxMatcher().match(uri);\n    }\n    static encode(params) {\n        return new URIEncryptedParser(params).encoded;\n    }\n    static encrypt(params, ...args) {\n        const [encryptor] = this.getAlgorithm(params.algorithm);\n        return this.encode(new encryptor(params, ...args).encrypt());\n    }\n    static decrypt(uri, ...args) {\n        const uriDecoded = new URIEncryptedParser(uri).decoded;\n        const [, decryptor] = this.getAlgorithm(uriDecoded.algorithm);\n        return new decryptor(uriDecoded, ...args).decrypt();\n    }\n    static setAlgorithm(algorithm, encrypter, decrypter) {\n        this.supportedAlgorithm[algorithm] = [encrypter, decrypter];\n    }\n    static getAlgorithm(algorithm) {\n        algorithm = algorithm || EncryptedURI.DEFAULT_ALGORITHM;\n        const [encryptor, decryptor] = this.supportedAlgorithm[algorithm] || [null, null];\n        if (!encryptor && !decryptor) {\n            throw new Error(`Algorithm '${algorithm}' not supported`);\n        }\n        return [encryptor, decryptor];\n    }\n}\nEncryptedURI.DEFAULT_ALGORITHM = 'aes';\nEncryptedURI.supportedAlgorithm = {};\n//  TODO: decorator\n// export function URIEncryptedAlgorithm(args: {\n//   algorithm: string,\n//   decrypter: typeof URIEncryptedDecrypter\n// }) {\n//   return function (\n//     target: typeof URIEncryptedEncrypter,\n//     key: string,\n//     decryptor: PropertyDescriptor\n//   ) {\n//   };\n// }\n"],
  "mappings": "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",
  "names": []
}
